<!DOCTYPE html>
<html>
  <head>
	  <meta name="viewport" content="width=device-width, initial-scale=1">
  	<link rel="shortcut icon" type="image/x-icon" href="favicon.ico" />

    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" crossorigin=""/>    <link rel="stylesheet" type="text/css" href="css/style.css">
    <link rel="stylesheet" type="text/css" href="css/style.css">

    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" crossorigin=""></script>
  </head>
  <body>
    <div id="friedmap"></div>

    <script>
      var mymap = L.map('friedmap').setView([50.79964, 4.66301], 17);

      L.tileLayer( 'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '<a href="https://www.openstreetmap.org/fixthemap">Fix a problem with the map!</a> | &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>',
        subdomains: ['a','b','c'], maxZoom: 19
      }).addTo( mymap );

      fetch('{{lines}}')
      .then(response => response.json())
      .then(geojson => {
        L.geoJson(geojson, {
        style: function(feature) {
          if (feature.geometry.type == "LineString") {
          rssi = 1;
          if (rssi > -100) {return {color: "#FF0000", "opacity": 0.4, "weight": "2"}};
          if (rssi > -105) {return {color: "#FFA500", "opacity": 0.6, "weight": "2"}};
          if (rssi > -110) {return {color: "#FFFF00", "opacity": 0.6, "weight": "2"}};
          if (rssi > -115) {return {color: "#00FF00", "opacity": 0.4, "weight": "2"}};
          if (rssi > -120) {return {color: "#00FFFF", "opacity": 0.4, "weight": "2"}};
          return {color: "#0000FF", "opacity": 0.4, "weight": "2"};
          };
        },

        onEachFeature: function (feature, layer) {
          layer.openPopup();
        }
        }).addTo( mymap );
      });

      var redIcon = new L.Icon({
      iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-red.png',
      iconSize: [13, 20],
      iconAnchor: [6, 20],
      popupAnchor: [1, -17],
      });

      var blueIcon = new L.Icon({
      iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-blue.png',
      iconSize: [13, 20],
      iconAnchor: [6, 20],
      popupAnchor: [1, -17],
      });

      fetch('{{APs}}')
      .then(response => response.json())
      .then(geojson => {
        L.geoJson(geojson, {
        pointToLayer: function(feature, latlng) {
          return L.marker(latlng, {
          icon: redIcon
          });
        },
        onEachFeature: function (feature, layer) {
          layer.bindPopup("<b>AP:</b> " +feature.properties.name +"<br />"+
                  "Switch: " +feature.properties.switch +"<br />"+
                  "SwitchPort: " +feature.properties.switchport +"<br />"+"<br />" +
                  "<a href='apdetail?number=" + feature.properties.name+"'>show AP info</a>");
        }
        }).addTo( mymap );
      });

      fetch('{{switches}}')
      .then(response => response.json())
      .then(geojson => {
        L.geoJson(geojson, {
        pointToLayer: function(feature, latlng) {
          return L.marker(latlng, {
          icon: blueIcon
          });
        },
        }).addTo( mymap );
      });
      </script>
    </div>
  </body>
</html>
